local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
	Name = "Esan HUB by Dextralon",
	Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
	LoadingTitle = "Esan HUB Loading",
	LoadingSubtitle = "by Dextralon",
	Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

	DisableRayfieldPrompts = false,
	DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

	ConfigurationSaving = {
		Enabled = true,
		FolderName = nil, -- Create a custom folder for your hub/game
		FileName = "Big Hub"
	},

	Discord = {
		Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
		Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
		RememberJoins = true -- Set this to false to make them join the discord every time they load it up
	},

	KeySystem = false, -- Set this to true to use our key system
	KeySettings = {
		Title = "Untitled",
		Subtitle = "Key System",
		Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
		FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
	}
})

local Tab = Window:CreateTab("Main (Skill issue LOl)", "angry") -- Title, Image

local datarequire = require(game:GetService("ReplicatedStorage").Packages.Knit)

Tab:CreateToggle({
	Name = "Bring Ball (op)",
	CurrentValue = false,
	Callback = function(Value)
		LoopBall = Value
		task.spawn(function()
			while LoopBall and task.wait(0.4) do
				xpcall(function()
					workspace.Junk.Football.CFrame = game.Players.LocalPlayer.Character.Hitbox.CFrame
				end,print)
			end
		end)
	end,
})

Tab:CreateSlider({
	Name = "X",
	Range = {0, 1000},
	Increment = 1,
	Suffix = "X",
	CurrentValue = 4.521,
	Callback = function(Value)
		X = Value
	end,
})

Tab:CreateSlider({
	Name = "Y",
	Range = {0, 1000},
	Increment = 1,
	Suffix = "Y",
	CurrentValue = 5.73,
	Callback = function(Value)
		Y = Value
	end,
})

Tab:CreateSlider({
	Name = "Z",
	Range = {0, 1000},
	Increment = 1,
	Suffix = "Z",
	CurrentValue = 2.398,
	Callback = function(Value)
		Z = Value
	end,
})

Tab:CreateSlider({
	Name = "Transparency",
	Range = {0, 1},
	Increment = 0.1,
	Suffix = "Transparency",
	CurrentValue = 0,
	Callback = function(Value)
		game.Players.LocalPlayer.Character.Hitbox.Transparency = Value
	end,
})

task.spawn(function()
	while task.wait() do 
		pcall(function()
			game.Players.LocalPlayer.Character.Hitbox.Size = Vector3.new(X,Y,Z)
		end)
	end
end)

local Goal = false

Tab:CreateToggle({
	Name = "Ultrainstinct",
	CurrentValue = false,
	Callback = function(Value)
		Goal = Value
		task.spawn(function()
			while Goal and task.wait(0.4) do
				xpcall(function()
					for i,v in pairs(workspace.Stadium.Teams:GetChildren()) do
						if v.Name ~= game.Players.LocalPlayer.Team.Name and game:GetService("Players").LocalPlayer:GetAttribute("HasBall") then
							repeat task.wait()
								local args = {
									[1] = "ShotActivated",
									[2] = workspace:WaitForChild("Junk"):WaitForChild("Football"),
									[3] = Vector3.new(13.054858207702637, 1.623178243637085, -131.73794555664062),
									[4] = Vector3.new(5.412383079528809, 52.89044952392578, 68.7153549194336)
								}

								game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ActionService"):WaitForChild("RE"):WaitForChild("PerformAction"):FireServer(unpack(args))
								workspace:WaitForChild("Junk"):WaitForChild("Football").CFrame = v.Goal.Hitbox.CFrame
							until not game:GetService("Players").LocalPlayer:GetAttribute("HasBall")
							task.wait(1.2)
							return
						end
						workspace.Junk.Football.CFrame = game.Players.LocalPlayer.Character.Hitbox.CFrame
					end
				end,print)
			end
		end)
	end,
})

local Tab = Window:CreateTab("LocalPlayer", "angry")

Tab:CreateToggle({
	Name = "Inf Satmina",
	CurrentValue = false,
	Callback = function(Value)
		InfSatmina = Value
	end,
})
task.spawn(function()
	local a = require(game:GetService("ReplicatedStorage").Packages.Knit)

	while task.wait()  do
		if InfSatmina then
			a.SharedInterfaceStates.Stamina.Amount:set(math.huge)
		end
	end
end)

local SpeedBypass = false 
local DefaultSpeed = 16  
local SprintSpeed = 32  
local CurrentSpeed = DefaultSpeed

Tab:CreateToggle({
	Name = "Speed Bypass",
	CurrentValue = false,
	Callback = function(Value)
		SpeedBypass = Value
		if not SpeedBypass then
			local player = game.Players.LocalPlayer
			if player and player.Character then
				local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
				if humanoid then
					humanoid.WalkSpeed = DefaultSpeed 
				end
			end
		end
	end,
})

Tab:CreateSlider({
	Name = "Sprint Speed",
	Range = {16, 100},
	Increment = 1,
	Suffix = "Speed",
	CurrentValue = SprintSpeed,
	Callback = function(Value)
		SprintSpeed = Value
	end,
})

local UIS = game:GetService("UserInputService")
UIS.InputBegan:Connect(function(input, processed)
	if not processed and input.KeyCode == Enum.KeyCode.LeftShift then
		CurrentSpeed = SprintSpeed
	end
end)

UIS.InputEnded:Connect(function(input)
	if input.KeyCode == Enum.KeyCode.LeftShift then
		CurrentSpeed = DefaultSpeed
	end
end)

task.spawn(function()
	while task.wait() do
		if SpeedBypass then
			local player = game.Players.LocalPlayer
			if player and player.Character then
				local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
				if humanoid then
					humanoid.WalkSpeed = CurrentSpeed
				end
			end
		end
	end
end)

local mt = getrawmetatable(game)
local backupnamecall = mt.__namecall
setreadonly(mt, false)

mt.__namecall = newcclosure(function(self, ...)
	local method = getnamecallmethod()
	if method == "Kick" and self == game.Players.LocalPlayer then
		return nil 
	end
	return backupnamecall(self, ...)
end)

setreadonly(mt, true)

local Teams = {"Home", "Away"}
local Positions = {"CF", "LF", "RF", "CM", "LB", "RB", "GK"}

local SelectedTeam = "Home"
local SelectedPosition = "CF"

local TeamDropdown = Tab:CreateDropdown({
	Name = "Choose Team",
	Options = Teams,
	CurrentOption = {SelectedTeam},
	MultipleOptions = false,
	Callback = function(Options)
		SelectedTeam = Options[1] 
	end,
})

local PositionDropdown = Tab:CreateDropdown({
	Name = "Pick a Positons",
	Options = Positions,
	CurrentOption = {SelectedPosition},
	MultipleOptions = false,
	Flag = "PositionDropdown",
	Callback = function(Options)
		SelectedPosition = Options[1] 
	end,
})

Tab:CreateButton({
	Name = "Join",
	Callback = function()
		local args = {
			[1] = {
				["Team"] = game:GetService("Teams"):WaitForChild(SelectedTeam),
				["TeamPosition"] = SelectedPosition
			}
		}

		game:GetService("ReplicatedStorage"):WaitForChild("__GamemodeComm"):WaitForChild("RE"):WaitForChild("_RequestJoin"):FireServer(unpack(args))
	end,
})
